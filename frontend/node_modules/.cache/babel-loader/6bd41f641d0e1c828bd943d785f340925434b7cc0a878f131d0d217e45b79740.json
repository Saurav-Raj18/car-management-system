{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst authslice = createSlice({\n  name: 'auth',\n  initialState: {\n    loading: true,\n    isauthenticated: false\n  },\n  reducers: {\n    loginrequest(state, action) {\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    loginsuccess(state, action) {\n      return {\n        loading: false,\n        isauthenticated: true,\n        user: action.payload.user\n      };\n    },\n    loginfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    clearerror(state, action) {\n      return {\n        ...state,\n        error: null\n      };\n    },\n    registerrequest(state, action) {\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    registersuccess(state, action) {\n      return {\n        loading: false,\n        isauthenticated: true,\n        user: action.payload.user\n      };\n    },\n    registerfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    loaduserrequest(state, action) {\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    loadusersuccess(state, action) {\n      return {\n        loading: false,\n        isauthenticated: true,\n        user: action.payload.user\n      };\n    },\n    loaduserfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    logoutsuccess(state, action) {\n      return {\n        loading: false,\n        isauthenticated: false\n      };\n    },\n    logoutfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    updateprofilerequest(state, action) {\n      return {\n        ...state,\n        loading: true,\n        isupdated: false\n      };\n    },\n    updateprofilesuccess(state, action) {\n      return {\n        ...state,\n        loading: false,\n        isupdated: true,\n        user: action.payload.user\n      };\n    },\n    updateprofilefail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    updatepasswordrequest(state, action) {\n      return {\n        ...state,\n        loading: true,\n        isupdated: false\n      };\n    },\n    updatepasswordsuccess(state, action) {\n      return {\n        ...state,\n        loading: false,\n        isupdated: true\n      };\n    },\n    updatepasswordfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    forgetpasswordrequest(state, action) {\n      return {\n        ...state,\n        loading: true,\n        message: null\n      };\n    },\n    forgetpasswordsuccess(state, action) {\n      return {\n        ...state,\n        loading: false,\n        message: action.payload.message\n      };\n    },\n    forgetpasswordfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    },\n    resetpasswordrequest(state, action) {\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    resetpasswordsuccess(state, action) {\n      return {\n        ...state,\n        loading: false,\n        isauthenticated: true,\n        user: action.payload.user\n      };\n    },\n    resetpasswordfail(state, action) {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = authslice;\nexport const {\n  loginrequest,\n  loginsuccess,\n  loginfail,\n  clearerror,\n  registerrequest,\n  registersuccess,\n  registerfail,\n  loaduserrequest,\n  loadusersuccess,\n  loaduserfail,\n  logoutsuccess,\n  logoutfail,\n  updateprofilerequest,\n  updateprofilesuccess,\n  updateprofilefail,\n  updatepasswordrequest,\n  updatepasswordsuccess,\n  updatepasswordfail,\n  forgetpasswordrequest,\n  forgetpasswordsuccess,\n  forgetpasswordfail,\n  resetpasswordrequest,\n  resetpasswordsuccess,\n  resetpasswordfail\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","authslice","name","initialState","loading","isauthenticated","reducers","loginrequest","state","action","loginsuccess","user","payload","loginfail","error","clearerror","registerrequest","registersuccess","registerfail","loaduserrequest","loadusersuccess","loaduserfail","logoutsuccess","logoutfail","updateprofilerequest","isupdated","updateprofilesuccess","updateprofilefail","updatepasswordrequest","updatepasswordsuccess","updatepasswordfail","forgetpasswordrequest","message","forgetpasswordsuccess","forgetpasswordfail","resetpasswordrequest","resetpasswordsuccess","resetpasswordfail","actions","reducer"],"sources":["/home/sweta/car-management-system/frontend/src/Component/Reducer/useReducer.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst authslice = createSlice({\n    name: 'auth',\n    initialState: {\n        loading: true,\n        isauthenticated: false\n    },\n    reducers: {\n        loginrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n\n            }\n        },\n        loginsuccess(state, action) {\n            return {\n                loading: false,\n                isauthenticated: true,\n                user: action.payload.user\n            }\n        },\n        loginfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        clearerror(state, action) {\n            return {\n                ...state,\n                error: null\n            }\n        },\n        registerrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n\n            }\n        },\n        registersuccess(state, action) {\n            return {\n                loading: false,\n                isauthenticated: true,\n                user: action.payload.user\n            }\n        },\n        registerfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        loaduserrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n\n            }\n        },\n        loadusersuccess(state, action) {\n            return {\n                loading: false,\n                isauthenticated: true,\n                user: action.payload.user\n            }\n        },\n        loaduserfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        logoutsuccess(state, action) {\n            return {\n                loading: false,\n                isauthenticated: false,\n\n            }\n        },\n        logoutfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        updateprofilerequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n                isupdated: false\n\n            }\n        },\n        updateprofilesuccess(state, action) {\n            return {\n                ...state,\n                loading: false,\n                isupdated: true,\n                user: action.payload.user\n            }\n        },\n        updateprofilefail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        updatepasswordrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n                isupdated: false\n\n            }\n        },\n        updatepasswordsuccess(state, action) {\n            return {\n                ...state,\n                loading: false,\n                isupdated: true,\n\n            }\n        },\n        updatepasswordfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        forgetpasswordrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n                message: null\n            }\n        },\n        forgetpasswordsuccess(state, action) {\n            return {\n                ...state,\n                loading: false,\n                message: action.payload.message\n            }\n        },\n        forgetpasswordfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n        resetpasswordrequest(state, action) {\n            return {\n                ...state,\n                loading: true,\n            }\n        },\n        resetpasswordsuccess(state, action) {\n            return {\n                ...state,\n                loading: false,\n                isauthenticated: true,\n                user: action.payload.user\n            }\n        },\n        resetpasswordfail(state, action) {\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        },\n\n    }\n\n})\n\n\nconst { actions, reducer } = authslice\n\nexport const { loginrequest, loginsuccess, loginfail, clearerror,\n    registerrequest, registersuccess, registerfail,\n    loaduserrequest, loadusersuccess, loaduserfail,\n    logoutsuccess, logoutfail,\n    updateprofilerequest, updateprofilesuccess, updateprofilefail,\n    updatepasswordrequest, updatepasswordsuccess, updatepasswordfail,\n    forgetpasswordrequest, forgetpasswordsuccess, forgetpasswordfail,\n    resetpasswordrequest, resetpasswordsuccess, resetpasswordfail\n} = actions\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}